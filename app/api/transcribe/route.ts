import { NextRequest, NextResponse } from "next/server";
import { createSpeechClient } from "@/lib/googleSpeechClient";

export async function POST(req: NextRequest) {
  try {
    const { audioBase64 } = await req.json();

    if (!audioBase64) {
      return NextResponse.json({ message: "√Åudio em base64 √© obrigat√≥rio." }, { status: 400 });
    }

    console.log("üéôÔ∏è Iniciando transcri√ß√£o...");
    console.log("üìä Tamanho do √°udio:", (audioBase64.length / 1024).toFixed(2), "KB");

    // Criar cliente do Google Speech
    let client;
    try {
      client = createSpeechClient();
      console.log("‚úÖ Cliente Google Speech criado com sucesso");
    } catch (error) {
      console.error("‚ùå Erro ao criar cliente:", error);
      return NextResponse.json({ 
        message: "Erro de configura√ß√£o do Google Cloud Speech API",
        error: error instanceof Error ? error.message : "Erro desconhecido",
        details: "Verifique se as credenciais do Google Cloud est√£o configuradas corretamente"
      }, { status: 500 });
    }

    // Configura√ß√£o da transcri√ß√£o
    const request = {
      config: {
        encoding: 'WEBM_OPUS' as const, // Formato mais comum para arquivos web
        sampleRateHertz: 48000, // Taxa padr√£o para WebM
        languageCode: 'pt-BR',
        alternativeLanguageCodes: ['pt-PT', 'en-US'],
        enableAutomaticPunctuation: true,
        enableWordTimeOffsets: false,
        model: 'latest_long', // Modelo otimizado para √°udio longo
        useEnhanced: true,
      },
      audio: {
        content: audioBase64,
      },
    };

    console.log("üîÑ Enviando para Google Speech API...");
    
    try {
      const [response] = await client.recognize(request);
      
      if (!response.results || response.results.length === 0) {
        console.log("‚ö†Ô∏è Nenhum resultado de transcri√ß√£o encontrado");
        return NextResponse.json({ 
          message: "Nenhum √°udio foi detectado ou o √°udio est√° muito baixo",
          transcription: "",
          confidence: 0
        });
      }

      // Combinar todos os resultados
      const transcription = response.results
        .map(result => result.alternatives?.[0]?.transcript || '')
        .join(' ')
        .trim();

      // Calcular confian√ßa m√©dia
      const confidences = response.results
        .map(result => result.alternatives?.[0]?.confidence || 0)
        .filter(conf => conf > 0);
      
      const averageConfidence = confidences.length > 0 
        ? confidences.reduce((a, b) => a + b, 0) / confidences.length 
        : 0;

      console.log("‚úÖ Transcri√ß√£o conclu√≠da");
      console.log("üìù Texto:", transcription.substring(0, 100) + "...");
      console.log("üéØ Confian√ßa:", (averageConfidence * 100).toFixed(1) + "%");

      return NextResponse.json({
        transcription,
        confidence: averageConfidence,
        resultsCount: response.results.length,
        message: "Transcri√ß√£o realizada com sucesso"
      });

    } catch (speechError: unknown) {
      console.error("‚ùå Erro na API do Google Speech:", speechError);
      
      let errorMessage = "Erro na transcri√ß√£o";
      let errorDetails = "Erro desconhecido";
      
      if (speechError instanceof Error) {
        errorMessage = speechError.message;
        
        // Tratar erros espec√≠ficos do Google Cloud
        if (errorMessage.includes("invalid_grant")) {
          errorDetails = "Credenciais do Google Cloud inv√°lidas ou expiradas. Verifique as vari√°veis de ambiente.";
        } else if (errorMessage.includes("invalid_rapt")) {
          errorDetails = "Problema de autentica√ß√£o com o Google Cloud. Verifique se as credenciais est√£o corretas.";
        } else if (errorMessage.includes("PERMISSION_DENIED")) {
          errorDetails = "Permiss√£o negada. Verifique se a conta de servi√ßo tem as permiss√µes necess√°rias.";
        } else if (errorMessage.includes("INVALID_ARGUMENT")) {
          errorDetails = "Formato de √°udio inv√°lido ou configura√ß√£o incorreta.";
        } else if (errorMessage.includes("RESOURCE_EXHAUSTED")) {
          errorDetails = "Cota da API excedida. Tente novamente mais tarde.";
        }
      }

      return NextResponse.json({
        message: "Erro ao processar o √°udio",
        error: errorMessage,
        details: errorDetails,
        timestamp: new Date().toISOString()
      }, { status: 500 });
    }

  } catch (error: unknown) {
    console.error("‚ùå Erro geral na transcri√ß√£o:", error);
    return NextResponse.json({
      message: "Erro interno do servidor",
      error: error instanceof Error ? error.message : "Erro desconhecido"
    }, { status: 500 });
  }
} 